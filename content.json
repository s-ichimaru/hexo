{"meta":{"title":"Tech-Tutorial","subtitle":null,"description":null,"author":"Satoshi Ichimaru","url":"https://s-ichimaru.github.io/hexo-site"},"pages":[{"title":"categories","date":"2018-09-12T05:11:05.000Z","updated":"2018-09-12T05:35:37.713Z","comments":false,"path":"categories/index.html","permalink":"https://s-ichimaru.github.io/hexo-site/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2018-09-12T05:11:14.000Z","updated":"2018-09-12T05:35:56.299Z","comments":false,"path":"tags/index.html","permalink":"https://s-ichimaru.github.io/hexo-site/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Docker入門：インストールと基本操作","slug":"docker-20180929-1","date":"2018-09-28T15:54:53.000Z","updated":"2018-09-28T22:46:49.555Z","comments":true,"path":"2018/09/29/docker-20180929-1/","link":"","permalink":"https://s-ichimaru.github.io/hexo-site/2018/09/29/docker-20180929-1/","excerpt":"","text":"Dockerインストール（Windows）Windows版のDockerは、２つのバージョンがある。 ・Docker for Windows Window 10 Professionalで導入する。 DockerマシンはHyper-Vで作成する。 公式はこちらを推奨している。 下記のサイトからインストーラをダウンロードしてインストールする。 https://www.docker.com/products/docker-desktop ・Docker Toolbox Windows 10 Home以下のOSで導入する。 DockerマシンはVirtualBoxで作成する（HomeではHyper-Vが利用できない） 下記のサイトからインストーラをダウンロードしてインストールする。 https://docs.docker.com/toolbox/toolbox_install_windows/ こちらの環境はWindows 10 Homeのため、Docker Toolboxを用いて説明を行う。 Docker構成 ・Windowsマシン（Windowsホスト） Dockerをインストールしたマシン。 VirtualBox（Proの場合はHyper-V）をDockerマシンを作成する。 Dockerクライアントを用いてDockerマシンを操作する。 ・Dockerマシン（Dockerホスト） Dockerコンテナを管理する仮想マシン。 ・Dockerイメージ コンテナを構成するイメージファイル。 イメージはDockerリポジトリからダウンロードする。 ・Dockerコンテナ Dockerイメージから作成される仮想コンテナ。 ・Docker Hub Dockerイメージを管理するクラウドリポジトリ。 https://hub.docker.com/ Dockerマシン作成まずはDockerマシンを作成する。PowerShellで操作を行う。マシン名はtest-machineとする。 # Docker Mahcine 一覧コマンドPS D:\\dev\\docker&gt; docker-machine lsNAME ACTIVE DRIVER STATE URL SWARM DOCKER ERRORS# Docker Mahcine 作成PS D:\\dev\\docker&gt; docker-machine create test-machineRunning pre-create checks...Creating machine...（省略）PS D:\\dev\\docker&gt; docker-machine lsNAME ACTIVE DRIVER STATE URL SWARM DOCKER ERRORStest-machine - virtualbox Running tcp://192.168.99.100:2376 v18.06.1-ce アクティブ化してDockerクライアントで操作できるようにする。docker-machine env～で環境変数を取得して、一番最後に出力される「&amp;～|Invoke-Expression」を実行する。docker-machine ls でActiveに*がついていれば完了。 PS D:\\dev\\docker&gt; docker-machine env test-machine --shell powershell（省略）# Run this command to configure your shell:# &amp; \"D:\\Installs\\Docker Toolbox\\docker-machine.exe\" env test-machine --shell powershell | Invoke-ExpressionPS D:\\dev\\docker&gt; &amp; \"D:\\Installs\\Docker Toolbox\\docker-machine.exe\" env test-machine --shell powershell | Invoke-ExpressionPS D:\\dev\\docker&gt; docker-machine lsNAME ACTIVE DRIVER STATE URL SWARM DOCKER ERRORStest-machine * virtualbox Running tcp://192.168.99.100:2376 v18.06.1-ce Dockerコンテナの作成次にDockerコンテナを作成する。ここではApacheをインストールして動作確認を行う。 手順） ・Docker Hubでイメージを確認 ・イメージの取得（docker pull） ・コンテナの作成（docker create） ・コンテナの起動（docker start） ・コンテナの起動２（docker run） Docker Hubでイメージを確認 コンテナを作成するにはイメージが必要なので、 Docker Hub( https://hub.docker.com/ )からhttpdを検索してイメージの情報を確認する。 イメージの取得（docker pull） docker pullでイメージのダウンロードを行う。 # Apache Imageの取得PS D:\\dev\\docker&gt; docker pull httpdUsing default tag: latestlatest: Pulling from library/httpdf189db1b88b3: Pull completeba2d31d4e2e7: Pull complete23a65f5e3746: Pull complete5e8eccbd4bc6: Pull complete4c145eec18d8: Pull completec64fd93430a0: Pull completec9efc31823a2: Pull completeDigest: sha256:81bc5f68f994a3c7bffc5d6ecba9e4fde70488c43ee8d57846a45c4995c67a23Status: Downloaded newer image for httpd:latestPS D:\\dev\\docker&gt;# Imageの一覧PS D:\\dev\\docker&gt; docker imagesREPOSITORY TAG IMAGE ID CREATED SIZEhttpd latest dabb52744997 2 days ago 178MBPS D:\\dev\\docker&gt; コンテナの作成（docker create）docker createでコンテナを作成する。「–name apache」でコンテナに名前を付ける。「-p 8081:80」でポートフォワードを行う。（DockerホストIP）:8081⇒（コンテナIP）:80でフォワードする。 # Apacheコンテナを作成PS D:\\dev\\docker&gt; docker create --name apache -p 8081:80 httpd7c725ff3a73331f2dafad9da4b11748a6ee86b965c7c24a696ae6e53a018325c# コンテナ一覧（停止中も含める）PS D:\\dev\\docker&gt; docker ps -aCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES7c725ff3a733 httpd \"httpd-foreground\" 6 seconds ago Created apachePS D:\\dev\\docker&gt; コンテナの起動（docker start）docker startでコンテナ名を指定して起動する。 # Apacheコンテナを起動PS D:\\dev\\docker&gt; docker start apacheapache# コンテナ一覧（起動中のみ）PS D:\\dev\\docker&gt; docker psCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES7c725ff3a733 httpd \"httpd-foreground\" 7 minutes ago Up 3 seconds 0.0.0.0:8081-&gt;80/tcp apachePS D:\\dev\\docker&gt; ブラウザで「（DockerホストIP）:8081」で画面が表示されるか確認する。なお、DockerホストのIPは「docker-machine ls」か「docker-machine ip test-machine」で確認できる。 コンテナの起動２（docker run）docker runは、docker pull ⇒ docker create ⇒ docker startを一括で行ってくれるコマンド。特に理由がないなら、こちらを利用したほうが効率が良い。なお、上記のapacheをdocker runで起動する場合は docker run --name apache -d -p 8081:80 httpd となる。注意するのは、docker createはデタッチモードで作成されるが、docker runはアタッチモードで作成される。そのため、デーモン実行する場合は「-d」を付与する。 起動中のDockerコンテナにアタッチ起動中のDockerコンテナを操作する場合、docker execでシェルを実行すれば侵入できる。その際、STDINを開き、疑似ターミナル (pseudo-TTY) を割り当てる必要がある。そのオプションが「-i」と「-t」となる。 PS D:\\dev\\docker&gt; docker exec -it apache /bin/bashroot@7c725ff3a733:/usr/local/apache2# lsbin build cgi-bin conf error htdocs icons include logs modulesroot@7c725ff3a733:/usr/local/apache2# コンテナ停止、削除docker stopとdocker rmを用いる。 PS D:\\dev\\docker&gt; docker stop apacheapachePS D:\\dev\\docker&gt; docker rm apacheapache 注意）コンテナの削除を行うとコンテナ内のデータは削除される。例えば、データベースコンテナを削除するとテーブルやデータは全て初期化される。これはDocker Volume機能を用いて、ホスト側でデータを作成すれば解決する。 イメージの削除docker rmiでイメージを削除する。パラメータにはIMAGE IDを指定する。 PS D:\\dev\\docker&gt; docker imagesREPOSITORY TAG IMAGE ID CREATED SIZEhttpd latest dabb52744997 2 days ago 178MBPS D:\\dev\\docker&gt; docker rmi dabb52744997Untagged: httpd:latestUntagged: httpd@sha256:81bc5f68f994a3c7bffc5d6ecba9e4fde70488c43ee8d57846a45c4995c67a23Deleted: sha256:dabb527449975533d6eea937e5a0123ed1b57b16d921b7b4346a3cf367751615Deleted: sha256:5d49a3f053113d87d691d2522f9c0277ffd18cabcce0d66c684099e1247afeceDeleted: sha256:eaa99c16f7c88d1e682bcf28bddfe2fc2af60578976c649e7682f8285b61e3dbDeleted: sha256:508679f3525982886ebd38e574f94503859b6dcecc16b4905e96162f9e3676c2Deleted: sha256:ea41f37c700199a74899df991c29276c58d47855b9366d0afaeec94f9b40b693Deleted: sha256:907e44cd08b8d5d3579acad7aafc3f9e7cbe4fef06e661fffd9d0bbfe0acfd9aDeleted: sha256:b5a1919e63f10b3e8057ca92fd414c7eb93bf06aa0a797701f5d598e35a811d5Deleted: sha256:8c466bf4ca6ffdda8b7717b1cd6fe31109529ee64e626a003a224fb8bd2bc469PS D:\\dev\\docker&gt; よく使うDockerコマンド一覧http://docs.docker.jp/engine/reference/commandline/index.html#docker-management-commands Docker Machine コマンド 説明 docker-machine ls Dockerマシン一覧 docker-machine create [name] Dockerマシンを作成するHyper-Vではオプションに–driver hypervが必要 docker-machine rm [name] Dockerマシンを削除する docker-machine start [name] Dockerマシンを実行する docker-machine stop [name] Dockerマシンを停止する docker-machine env [name] —shell powershell Docker環境変数の取得を行う docker-machine ssh [name] Dockerマシンにssh接続を行う Docker イメージ コマンド 説明 docker images イメージの一覧 docker pull [repositoryName:tag] イメージを取り込み docker rmi [image] イメージの削除 Docker コンテナ コマンド 説明 docker ps プロセス一覧-aで停止中も表示 docker create [image] コンテナの作成–name：コンテナ名-p ポートフォワード docker start [container] コンテナの実行 docker run [image] pull,create,startのセットコマンド docker stop [container] コンテナの停止 docker rm [container] コンテナの削除 docker exec [container][command] コンテナのコマンド実行コンテナアタッチ：-it /bin/bash","categories":[{"name":"仮想化","slug":"仮想化","permalink":"https://s-ichimaru.github.io/hexo-site/categories/仮想化/"},{"name":"Docker","slug":"仮想化/Docker","permalink":"https://s-ichimaru.github.io/hexo-site/categories/仮想化/Docker/"}],"tags":[{"name":"仮想化","slug":"仮想化","permalink":"https://s-ichimaru.github.io/hexo-site/tags/仮想化/"},{"name":"Docker","slug":"Docker","permalink":"https://s-ichimaru.github.io/hexo-site/tags/Docker/"}]},{"title":"Docker入門：概要","slug":"docker-20180927-1","date":"2018-09-26T15:00:29.000Z","updated":"2018-09-26T22:43:36.073Z","comments":true,"path":"2018/09/27/docker-20180927-1/","link":"","permalink":"https://s-ichimaru.github.io/hexo-site/2018/09/27/docker-20180927-1/","excerpt":"","text":"Dockerとはhttps://www.docker.com/ Docker（ドッカー[2]）はコンテナ型の仮想化環境を提供するオープンソースソフトウェアである[3]。VMware製品などの完全仮想化を行うハイパーバイザ型製品と比べて、ディスク使用量は少なく、仮想環境 (インスタンス) 作成や起動は速く、性能劣化がほとんどないという利点を持つ。 wikipedia,ja.wikipedia.org/wiki/Docker 仮想化は古くからある技術であり、主にサーバのリソースを有効活用するために用いられる。1台のマシンに複数のOSを立ち上げて、あたかも複数のマシンが動作しているように見せる仕組みだ。仮想化ソフトウェアを用いて、仮想的に立ち上げたマシンを仮想マシン（Virtual Machine：略してVM）と呼ぶ。 従来の仮想化では、OSが仮想マシンにそのまま乗るため、どうしてもリソースの冗長性が生じる。DockerはLinuxのコンテナ技術を利用して、ホストとなるOSのリソース（カーネル）を使いまわす。つまり、一つのOSで複数のOSが実行しているように見えるわけだ。これにより、非常に軽量な仮想化を実現できる。なお、従来の仮想化をホスト型仮想化、Dockerをコンテナ型仮想化と呼ぶ。 参考）https://knowledge.sakura.ad.jp/13265/ コンテナ型仮想化は良いこと尽くしというわけではない。ホスト型仮想化は仮想マシンが独立しており分離レベルが高い。コンテナ型は分離レベルが低いため、セキュリティ等に問題があった場合は全てのマシンに影響する。さらにコンテナ型仮想化はカーネルに依存するため、LinuxのDockerにWindowsを入れることはできない。 Dockerの用途従来のサーバ仮想化はもちろんのこと、軽量化により開発マシンにも適用されることが多くなってきている。開発ではプロジェクトごとに異なるプログラム実行環境、データベースなどをインストールして作業を行うが、管理が煩雑になったり、異なるバージョンの共存が困難だったりと問題となることがある。そもそも環境構築の負担も高い。 Dockerを用いて、開発環境を仮想化することで管理が非常に楽になる。仮想マシンの作成、削除ならびにコンテナの作成、削除が容易で高速なため、不要となった環境を削除、必要になったら作成と手軽に行うとこが可能だ。 なお、Docker環境をパブリッククラウドにデプロイすることもできる。これにより、開発環境は本番環境と同じ構成で作業を行える。注意：下記の例ではRDBもDockerに含めているが、実際はAmazon RDSを用いたほうが良い。DockerはDisk I/Oの多いRDBや、サーバ間の双方向のネットワーク通信が必要となる分散ストレージは不向きとされているらしい。Dockerの本番運用は十分な検討が必要。 DockerのEdition・Docker Community Edition(Docke CE) 無償版Docker 基本的なDocker機能は利用できる。 Stable版（四半期ごとのリリース）とEdge版（一か月ごとのリリース）に分かれる。 ・Docker Enterprise Edition(Docker EE) 有償版Docker Docker社が認定したコンテナやプラグインが利用可能。 プライベートリポジトリを利用できる。 イメージのセキュリティスキャンが行われる。 四半期ごとのリリース。 など Dockerのバージョン表記17.10.0-ce ⇒ 2017/10にリリースされたDocker Community Edition17.10.0-ee ⇒ 2017/10にリリースされたDocker Enterprise Edition 参考・Docker ドキュメント日本語化プロジェクト http://docs.docker.jp/ ・Docker入門（第一回）～Dockerとは何か、何が良いのか～ https://knowledge.sakura.ad.jp/13265/ ・ゼロからはじめる Dockerによるアプリケーション実行環境構築 https://www.udemy.com/docker-k/","categories":[{"name":"仮想化","slug":"仮想化","permalink":"https://s-ichimaru.github.io/hexo-site/categories/仮想化/"},{"name":"Docker","slug":"仮想化/Docker","permalink":"https://s-ichimaru.github.io/hexo-site/categories/仮想化/Docker/"}],"tags":[{"name":"仮想化","slug":"仮想化","permalink":"https://s-ichimaru.github.io/hexo-site/tags/仮想化/"},{"name":"Docker","slug":"Docker","permalink":"https://s-ichimaru.github.io/hexo-site/tags/Docker/"}]},{"title":"JHipster入門：概要とシンプルアプリ構築","slug":"jhipster-20180922-1","date":"2018-09-21T15:02:29.000Z","updated":"2018-09-22T09:25:09.559Z","comments":true,"path":"2018/09/22/jhipster-20180922-1/","link":"","permalink":"https://s-ichimaru.github.io/hexo-site/2018/09/22/jhipster-20180922-1/","excerpt":"JHipsterという最新Java関連のテクノロジーを詰め込んだ開発プラットフォームがある。マイナー感は否めないが、Javaのスキルアップには良い道しるべになると思われる。","text":"JHipsterという最新Java関連のテクノロジーを詰め込んだ開発プラットフォームがある。マイナー感は否めないが、Javaのスキルアップには良い道しるべになると思われる。 JHipsterとはhttps://www.jhipster.tech/ Spring Boot + Angular / React WebアプリケーションおよびSpringマイクロサービスを生成、開発、およびデプロイするための開発プラットフォームである。SPA（single-page application）＋マイクロサービスを構築するための土台を用意してくれるのだ。 そもそも、このプラットフォームを見つけた経緯としては、JavaでRuby on Railsのscaffold的なことが出来ないかを調査したところから始まる。scaffoldとはCRUD画面とそれに紐づくドメインモデル（エンティティ）を自動生成してくれる仕組みだ。シンプルな画面しか生成されないためコードをガリガリ修正する必要はあるが、ゼロから作成するよりも負担は低いし、生成されたコードは入門者の良いお手本になる。 「それならplay frameworkでしょ」となるかもしれないが、個人的にあれはJavaではない気がする。確かにJavaVMで動作するし、Java言語（推奨はJVM言語のScalaだが）でコーディングするが、J2EEは用いない。長いことJavaをやってると、WebアプリでJ2EE（Servlet）を用いないのはすごく違和感がある。別に貶しているわけではない。play frameworkに組み込まれているノンブロッキングIOのNettyサーバーはB2Cでは必須級のサーバだと思うし、高速開発には良いフレームワークだと思う。ただ、play frameworkで作るならRuby on Railsで良くない？となってしまう。 やはりJavaのWebといえばJ2EEコンテナでしょ！Springでしょ！となる。そこで見つけたのがJHipsterになる。 JHipsterの特徴Spring Bootを軸として、それに付与するテクノロジーを選択して構築していく。JHipsterはフレームワークではなく、コードジェネレータの役割を果たすために開発プラットフォームとなっている。マイナーなプラットフォームだし、比較的新しい技術をガンガン取り入れている感じがするので、実運用で使うのは懸念が生じるが、そもそも基盤はSpring BootやAngular（or React）なので自動生成されるソースを熟知すれば問題ないとも思う。 ・とりあえず実績。※実際に使用しているかは分からないhttps://www.jhipster.tech/companies-using-jhipster/ Adobeやgoogle、Pivotal、NTT DATAまでもある。ダウンロード数は月に75,000。GitHubリポジトリ検索は2,723。（ちなみにjava 881,294 spring 352,379） ・クライアントサイド テクノロジー ・サーバーサイド テクノロジー ・デベロップメント テクノロジー ・CD/CI テクノロジー JHipsterインストール 環境 バージョン OS Windows10 Home node.js 8.12.0 (LTS) java 1.8.0_73 jhipster 5.2.1※最新より少しバージョンダウン JHipsterのインストールはnode.jsのnpmで行う。よってnode.jsをインストールする。※安定版（LTS）を選択することhttps://nodejs.org/ja/ Javaは1.8以上をインストール。http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html PowerShellでnpm install -g generator-jhipster@5.2.1を実行する。 1234567891011PS C:\\dev\\JHipster&gt; node --versionv8.12.0PS C:\\dev\\JHipster&gt; java -versionjava version \"1.8.0_73\"Java(TM) SE Runtime Environment (build 1.8.0_73-b02)Java HotSpot(TM) 64-Bit Server VM (build 25.73-b02, mixed mode)PS C:\\dev\\JHipster&gt; npm install -g generator-jhipster@5.2.1・・・PS C:\\dev\\JHipster\\myApp&gt; jhipster --versionUsing JHipster version installed globally5.2.1 アプリの構築myAppとしてサンプルアプリを構築するmyAppフォルダを作り、カレントにしてjhipsterを実行する。その後、どのような構築を行うか質問が来るので回答を入れていく。質問の内容は、下記のシートを参照https://drive.google.com/open?id=1PNQogsa49eb5v_VB8zC684v3mNzthZd79YNWbW05qAI シンプル構成で構築 質問 回答 アプリタイプ モノリシックアプリケーション アプリ名 myApp パッケージ jp.co.myApp JHipsterレジストリを使用 無し 認証 JWT認証 データベースタイプ SQLデータベース データベース（本番） PostgreSQL データベース（開発） H2インメモリ Springキャッシュ 有り Hibenate2次キャッシュ 有り Maven or Gradle Maven その他テクノロジー 無し クライアントフレームワーク Angular LibSassの使用 無し 国際化のサポート 有り（ベースはEnglish、言語選択で日本語を追加） テスティングフレームワーク Protractor JHipster Marketplaceの使用 無し 123456789101112131415161718192021222324252627282930313233343536PS C:\\dev\\JHipster&gt; mkdir myAppPS C:\\dev\\JHipster&gt; cd myAppPS C:\\dev\\JHipster\\myApp&gt; jhipster・・・? Which *type* of application would you like to create? Monolithic application (recommended for simple projects)? What is the base name of your application? myApp? What is your default Java package name? jp.co.myapp? Do you want to use the JHipster Registry to configure, monitor and scale your application? No? Which *type* of authentication would you like to use? JWT authentication (stateless, with a token)? Which *type* of database would you like to use? SQL (H2, MySQL, MariaDB, PostgreSQL, Oracle, MSSQL)? Which *production* database would you like to use? PostgreSQL? Which *development* database would you like to use? H2 with disk-based persistence? Do you want to use the Spring cache abstraction? Yes, with the Ehcache implementation (local cache, for a single node)? Do you want to use Hibernate 2nd level cache? Yes? Would you like to use Maven or Gradle for building the backend? Maven? Which other technologies would you like to use?? Which *Framework* would you like to use for the client? Angular 6? Would you like to enable *SASS* stylesheet preprocessor? No? Would you like to enable internationalization support? Yes? Please choose the native language of the application English? Please choose additional languages to install Japanese? Besides JUnit and Jest, which testing frameworks would you like to use? Protractor? Would you like to install other generators from the JHipster Marketplace? No・・・&gt; my-app@0.0.0 cleanup C:\\dev\\JHipster\\myApp&gt; rimraf target/&#123;aot,www&#125;Congratulations, JHipster execution is complete!Application successfully committed to Git. アプリの起動Maven wrapperを実行する 12PS C:\\dev\\JHipster\\myApp&gt; .\\mvnw・・・ 下記のURLを開いてページが表示されればOKhttp://localhost:8080/ 右上のlanguageから日本語を選択すると日本語化される。 adminでログインして、メトリクス等が正常に動作していくか確認 ユーザ管理からユーザの登録もできるが、指定したメールアドレスは実際に送信処理が行われるので注意すること。 エンティティの作成https://www.jhipster.tech/jdl/ やり方は色々とあるようだが、ここではJDL-Studioを用いてエンティティを作成する https://start.jhipster.tech/jdl-studio/ 開くと、簡単なサンプルブログのエンティティ構造のが示されている。とりあえず、このエンティティをmyAppに取り込む。 右上の↓矢印でjdlファイルのダウンロードを行う。 ダウンロードしたファイルを、適当なフォルダに移動する。ここではmyAppの下にjdlフォルダを作成して、sample-blog-jdl.jhに名前を変更して配置する。 jdlファイルをアプリに取り込むコードを上書きする際にどのようにマージするか質問※されるので、aのoverwrite this and all othersを選択する。※Overwrite src\\main\\resources\\config\\liquibase\\master.xml? 12PS C:\\dev\\JHipster\\myApp&gt; jhipster import-jdl .\\jdl\\sample-blog-jdl.jh・・・ メニューのエンティティに項目が追加され、CRUD操作を行うことが出来るようになる。 Intellij IDEAによる開発１．プロジェクトのインポート ２．myAppにあるpom.xmlを選択する ３．そのまま「次へ」を選び続け完了する。 ４．jp.co.myapp.MyAppを実行すればアプリケーションが起動する","categories":[{"name":"アプリケーション","slug":"アプリケーション","permalink":"https://s-ichimaru.github.io/hexo-site/categories/アプリケーション/"},{"name":"JHipster","slug":"アプリケーション/JHipster","permalink":"https://s-ichimaru.github.io/hexo-site/categories/アプリケーション/JHipster/"}],"tags":[{"name":"アプリケーション","slug":"アプリケーション","permalink":"https://s-ichimaru.github.io/hexo-site/tags/アプリケーション/"},{"name":"Java","slug":"Java","permalink":"https://s-ichimaru.github.io/hexo-site/tags/Java/"},{"name":"JHipster","slug":"JHipster","permalink":"https://s-ichimaru.github.io/hexo-site/tags/JHipster/"}]},{"title":"はじめてのAWS：④Amazon FC2(Amazon Linux)","slug":"aws-20180917-1","date":"2018-09-17T13:03:50.000Z","updated":"2018-09-17T14:07:33.159Z","comments":true,"path":"2018/09/17/aws-20180917-1/","link":"","permalink":"https://s-ichimaru.github.io/hexo-site/2018/09/17/aws-20180917-1/","excerpt":"FC2インスタンスにTomcatを入れて動作させてみる。","text":"FC2インスタンスにTomcatを入れて動作させてみる。 Amazon FC2とはhttps://aws.amazon.com/jp/ec2/ 仮想のコンピューティング環境・いわゆる「サーバ」を利用できるサービス・OSより上のレイヤについては自由に設定可能・従量課金制 EC2を使う上での5大ポイント・OS/Imageの選択・インスタンスタイプの選択・ストレージの選択・セキュリティグループの設定・SSHキーペアの設定 インスタンスタイプ・マイクロインスタンス：t1.～・汎用：t2.～・コンピューティングの最適化：c5d.～・GPU Graphics：g3.～・GPU インスタンス：g2.～・GPU コンピューティング：p2.～・メモリ最適化：r4.～・ストレージの最適化：d2.～ インスタンス作成とSSH接続 ※Step3のシェルコピー用123456789101112#!/bin/bash# ホスト名sed -i 's/^HOSTNAME=[a-zA-Z0-9\\.\\-]*$/HOSTNAME=sample-ec2-tomcat/g' /etc/sysconfig/networkhostname 'sample-ec2-tomcat'# タイムゾーンcp /usr/share/zoneinfo/Japan /etc/localtimesed -i 's|^ZONE=[a-zA-Z0-9\\.\\-\\\"]*$|ZONE=\"Asia/Tokyo”|g' /etc/sysconfig/clock# 言語設定echo \"LANG=ja_JP.UTF-8\" &gt; /etc/sysconfig/i18n Tomcatインストール123456789101112131415161718192021222324#javaインストール確認$ java -version#Tomcatが既にインストールされていないか確認yum list installed | grep tomcat#Tomcatがyumにあるか確認$ yum search tomcat#tomcat8 インストールsudo yum install tomcat8#Tomcat8のインストール確認yum list installed | grep tomcat#tomcat8 インストール先の確認rpm -ql tomcat8#tomcat8 起動確認sudo service tomcat8 status#tomcat8 起動sudo service tomcat8 start struts-blank.warのデプロイ適当なwarファイル（ここではstruts-blank）をデプロイするTeraTermのSCPを用いてwarを転送 デプロイ1234567891011#warを/usr/share/tomcat8/webappsにコピーする$ cd ~$ sudo cp struts-blank-1.3.10.war /usr/share/tomcat8/webapps/sample.war#ログを確認する$ sudo bash -c \"cd /usr/share/tomcat8/logs/;ls\"$ sudo more /usr/share/tomcat8/logs/catalina.out# [localhost-startStop-1] org.apache.catalina.startu# p.HostConfig.deployWAR Webアプリケーションアーカイブ [/var/lib/tomcat8/webapps/s# ample.war] を配備します が出てればOK 動作確認http://(パブリックIP):8080/sample/","categories":[{"name":"クラウド","slug":"クラウド","permalink":"https://s-ichimaru.github.io/hexo-site/categories/クラウド/"},{"name":"AWS","slug":"クラウド/AWS","permalink":"https://s-ichimaru.github.io/hexo-site/categories/クラウド/AWS/"}],"tags":[{"name":"クラウド","slug":"クラウド","permalink":"https://s-ichimaru.github.io/hexo-site/tags/クラウド/"},{"name":"AWS","slug":"AWS","permalink":"https://s-ichimaru.github.io/hexo-site/tags/AWS/"}]},{"title":"はじめてのAWS：③アカウント登録","slug":"aws-20180916-2","date":"2018-09-16T11:16:26.000Z","updated":"2018-09-16T11:44:30.986Z","comments":true,"path":"2018/09/16/aws-20180916-2/","link":"","permalink":"https://s-ichimaru.github.io/hexo-site/2018/09/16/aws-20180916-2/","excerpt":"","text":"AWSアカウントについてAWSリソースの論理的な集合体・サービスごと or 環境ごと（本番、検品）で分けるのが一般的・この単位で利用料の請求がくる AWSアカウントを作るのに必要なもの・クレジットカード・電話番号 ルートユーザとIAMユーザルートユーザ・全てのAWSサービスを利用できる特権ユーザ・アカウントの設定変更、サポートプランはルートユーザのみ・通常の作業にルートユーザは用いてはならない IAMユーザ・割り当てられたIAMポリシーで許可されたAWSサービスを利用できる・利用者ごとに払い出し、通常の作業はこのユーザで行う アカウント登録まずはアカウント登録を行う。 IAMユーザ登録rootの代わりとなる管理者ユーザを作成する。 CloudTrail（操作ログ）の設定デフォルトログは90日間しか保存されないので永続化の設定を行う。ただし、追加料金がかかる可能性があるので注意すること。個人で利用する際は不要と思われる。 CloudWatch（請求アラート）の設定インスタンス停止し忘れで多額の請求が行われないようにアラートの設定を行う。 参考資料Amazon Web Servicehttps://aws.amazon.com/jp/ 手を動かしながら2週間で学ぶ AWS 基本から応用までhttps://www.udemy.com/aws-14days/","categories":[{"name":"クラウド","slug":"クラウド","permalink":"https://s-ichimaru.github.io/hexo-site/categories/クラウド/"},{"name":"AWS","slug":"クラウド/AWS","permalink":"https://s-ichimaru.github.io/hexo-site/categories/クラウド/AWS/"}],"tags":[{"name":"クラウド","slug":"クラウド","permalink":"https://s-ichimaru.github.io/hexo-site/tags/クラウド/"},{"name":"AWS","slug":"AWS","permalink":"https://s-ichimaru.github.io/hexo-site/tags/AWS/"}]},{"title":"はじめてのAWS：②料金見積","slug":"aws-20180916-1","date":"2018-09-15T17:20:38.000Z","updated":"2018-09-17T13:04:05.476Z","comments":true,"path":"2018/09/16/aws-20180916-1/","link":"","permalink":"https://s-ichimaru.github.io/hexo-site/2018/09/16/aws-20180916-1/","excerpt":"","text":"※※※ 知識不足のため、改訂の可能性は高いです ※※※ 利用料金の試算https://aws.amazon.com/jp/how-to-understand-pricing/ 利用料金について大きなズレがないか確認するために試算を行う。 システム構成公式で提示されている構成例を参考に試算する。 Windows Server 社内業務アプリ環境移行のためのクラウド構成例https://aws.amazon.com/jp/cdp/windows-bizapp-migration/ 予約金（年一回）：＄2,775.05月額 ：＄371.42 上記の構成から本番機、検証機とインスタンスを分け、DBはSQL Server Express、本番の使用率は１００％（365日/24時間稼働）、検証機は１０％、データのダウンロードについては、月間10GBを想定とする。 環境 サービス 設定 使用率 本番 EC2 OS Windows Server 100% インスタンスタイプ r4.large vCPU 2コア メモリ 15.25G EBS タイプ Amazon EBS 汎用 SSD (gp2) ストレージ 160G RDS DB SQL Server Express 100% インスタンスタイプ db.t2.medium vCPU 2コア メモリ 4G ストレージ 80G（汎用SSD） 検証 EC2 OS Windows Server 10% インスタンスタイプ r4.large vCPU 2コア メモリ 15.25G EBS タイプ Amazon EBS 汎用 SSD (gp2) ストレージ 160G RDS DB SQL Server Express 10% インスタンスタイプ db.t2.medium vCPU 2コア メモリ 4G ストレージ 80G（汎用SSD） 共通 VPC VPN接続数 １ S3 ストレージ 240G（本番バックアップ） サポート ビジネスプラン 見積り簡易見積りツールhttp://calculator.s3.amazonaws.com/index.html?lng=ja_JP EC2＆ESB S3アップロード（バックアップ）は無料のため設定なし RDS VPC サポート 見積り結果","categories":[{"name":"クラウド","slug":"クラウド","permalink":"https://s-ichimaru.github.io/hexo-site/categories/クラウド/"},{"name":"AWS","slug":"クラウド/AWS","permalink":"https://s-ichimaru.github.io/hexo-site/categories/クラウド/AWS/"}],"tags":[{"name":"クラウド","slug":"クラウド","permalink":"https://s-ichimaru.github.io/hexo-site/tags/クラウド/"},{"name":"AWS","slug":"AWS","permalink":"https://s-ichimaru.github.io/hexo-site/tags/AWS/"}]},{"title":"はじめてのAWS：①AWS概要","slug":"aws-20180915-1","date":"2018-09-15T08:27:38.000Z","updated":"2018-09-16T11:12:42.139Z","comments":true,"path":"2018/09/15/aws-20180915-1/","link":"","permalink":"https://s-ichimaru.github.io/hexo-site/2018/09/15/aws-20180915-1/","excerpt":"","text":"AWSとはAmazon Web Services（アマゾン ウェブ サービス、AWS）とは、Amazon.comにより提供されているクラウドコンピューティングサービス（ウェブサービス）である。これらのサービスは全世界で18の地域に提供されている（2018年現在）。AWSの有名なサービスにAmazon Elastic Compute Cloud (EC2) とAmazon Simple Storage Service (S3) がある。これまでのクライアントが保有していた物理的なサーバファームと比較してAWSは大規模な計算処理能力を速やかに提供出来ることが強みである。 wikipedia,ja.wikipedia.org/wiki/Amazon_Web_Services AWSサービス概要 少々古い情報だが見やすいので参考にさせてもらった。参考：http://www.so-net.ne.jp/solution/service/idc/aws.html 非常にサービスが多いため、主要となるインフラ部分を重点的に整理することにする。 コンピューティング Amazon EC2：仮想サーバhttps://aws.amazon.com/jp/ec2/ Amazon Elastic Compute Cloud (Amazon EC2) は、安全でサイズ変更可能なコンピューティング性能をクラウド内で提供するウェブサービス。アプリケーションのニーズに応じて自動的なスケールアップ、スケールダウンを数分以内に実現可能。 料金体系・オンデマントインスタンス（従量課金制）長期的な契約無しにコンピューティングの性能に対して料金を支払う。 ・リザーブドインスタンス（1年または3年契約の前払い）オンデマントインスタンスの料金に比べて大幅な割引（最大７５％）が受けれる。 ・スポットインスタンス入札式で余ったリソースを使うためオンデマンドよりも安い。需要と供給により価格が変動するため、入札価格が変動価格を上回れば「強制的に削除」される。大量のコンピューティング容量を必要としながら、緊急性は低い場合に便利なオプション。 料金表https://aws.amazon.com/jp/ec2/pricing/ Amazon ECS：コンテナ管理サービスhttps://aws.amazon.com/jp/ecs/ Amazon Elastic Container Service (Amazon ECS) は、Docker コンテナをサポートするスケーラビリティに優れた高性能なコンテナ管理サービス。コンテナ化されたアプリケーションをAWSで簡単に実行およびスケールが可能。 料金体系・Fargate起動タイプモデルコンテナ化されたアプリケーションに必要なvCPU（仮想CPU）とメモリリソースで金額がかかる ・FC2起動タイプ追加料金は発生しない。アプリケーションを保存、実行するために作成したAWSリソース（FC2インスタンス、FBSボリュームなど）に対して料金が発生する。 料金表https://aws.amazon.com/jp/ecs/pricing/ ストレージ Amazon S3：オンラインストレージサービスhttps://aws.amazon.com/jp/s3/ Amazon Simple Storage Service(Amazon S3) とは、Amazon Web Services によって提供されるオンラインストレージのWebサービス。Amazon S3は、Webサービスのインタフェースを介してストレージを提供している。保存できるデータ容量、ファイル数に制約はないが、従量課金のため使った分だけ料金が発生する。 料金表https://aws.amazon.com/jp/s3/pricing/ Amazon EBS：EC2インスタンスのストレージhttps://aws.amazon.com/jp/ebs/ Amazon Elastic Block Store (Amazon EBS) は、AWS クラウドの Amazon EC2 インスタンスで使用する永続的なブロックレベルのストレージボリュームを提供する。 料金体系・Amazon EBS 汎用 SSD (gp2) ボリューム・Amazon EBS プロビジョンド IOPS SSD (io1) ボリューム ・Amazon EBS スループット最適化 HDD (st1) ボリューム・Amazon EBS Cold HDD (sc1) ボリューム プロビジョニング（リソース割り当て）した容量 (GB/月) で決まり、 そのストレージを解放するまで毎月料金が発生する。 ・Amazon S3 に対する Amazon EBS スナップショット Amazon S3とのデータ転送による料金を支払う。 料金表https://aws.amazon.com/jp/ebs/pricing/ Amazon EFS：ファイルストレージhttps://aws.amazon.com/jp/efs/ Amazon Elastic File System（Amazon EFS）とは、AWS上で使用できる共有ファイルストレージ。AWS上で複数のEC2インスタンスから共有ファイルストレージを使用したい場合に利用する。 料金表https://aws.amazon.com/jp/efs/pricing/ Amazon Glacier：低コストファイルストレージ頻繁に使用されないデータ（コールドデータ）に最適化された低コスト、高耐久性を備えたストレージサービスで、データのアーカイブや長期バックアップに使用できる。 料金表https://aws.amazon.com/jp/glacier/pricing/ データベース Amazon RDS：リレーショナルデータベースサービスhttps://aws.amazon.com/jp/rds/ Amazon Relational Database Service (Amazon RDS) を使用すると、クラウド内のリレーショナルデータベースのセットアップ、運用、スケールを行うことが可能。データベースの種類と利用時間で料金を支払う。Amazon Aurora、PostgreSQL、MySQL、MariaDB、Oracle、Microsoft SQL Server の6 つの使い慣れたデータベースエンジンから選択可能。Amazon Auroraとは、MySQL および PostgreSQL と互換性のあるリレーショナルデータベースエンジン。 DBインスタンスクラスhttps://docs.aws.amazon.com/ja_jp/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html 料金体系オンデマンドインスタンス or リザーブドインスタンス 料金表https://aws.amazon.com/jp/rds/pricing/ Amazon DynamoDB：NoSQLデータベースサービスhttps://aws.amazon.com/jp/dynamodb/ NoSQL（Key-Valueストア）によるデータベースサービス。RDBMSに比べて大量のデータを扱うことができる。（ビックデータの解析、情報のリアルタイム処理など） 料金表https://aws.amazon.com/jp/dynamodb/pricing/ Amazon ElastiCache：インメモリデータベースサービスhttps://aws.amazon.com/jp/elasticache/ フルマネージドな分散インメモリデータベースストらサービスキャッシュエンジンとしてmemcachedとRedisがサポートされている。 料金表https://aws.amazon.com/jp/elasticache/pricing/ ネットワーク＆ルーティング Amazon VPC：仮想プライベートクラウドhttps://aws.amazon.com/jp/vpc/ Amazon Virtual Private Cloud (Amazon VPC) によりAWSリソースをユーザー定義の仮想ネットワークで起動できる。独自のIPアドレス範囲の選択、サブネットの作成、ルートテーブル、ネットワークゲートウェイの設定など、仮想ネットワーク環境を完全にコントロール可能。 料金表https://aws.amazon.com/jp/vpc/pricing/ Amazon ELB：ロードバランサhttps://aws.amazon.com/jp/elasticloadbalancing/ Amazon Elastic Load Balancing（Amazon ELB） は、アプリケーションへのトラフィックを複数のターゲット (Amazon EC2 インスタンス、コンテナ、IP アドレスなど) に自動的に分散する。 料金表https://aws.amazon.com/jp/elasticloadbalancing/pricing/ Amazon Route 53：クラウドDNSサーバhttps://aws.amazon.com/jp/route53/ Amazon Route 53 は、可用性と拡張性に優れたドメインネームシステム (DNS) ウェブサービス。 料金表https://aws.amazon.com/jp/route53/pricing/ AWS Direct Connect：専用線接続サービスhttps://aws.amazon.com/jp/directconnect/ AWS Direct Connect を使用するとAWS とデータセンター、オフィス、またはコロケーション環境間にプライベート接続を確立することができる。 料金表https://aws.amazon.com/jp/directconnect/pricing/ 参考資料Amazon Web Servicehttps://aws.amazon.com/jp/ アマゾンウェブサービスの概要https://d1.awsstatic.com/International/ja_JP/Whitepapers/aws-overview.pdf [初心者向け]AWSで開発環境を構築しようhttps://www.slideshare.net/AmazonWebServicesJapan/webinar-aws 【2018年】AWS全サービスまとめ その1（コンピューティング、ストレージ、データベース、移行、ネットワーキング ＆ コンテンツ配信）https://dev.classmethod.jp/cloud/aws/aws-summary-2018-1/ So-netソリューションサービスhttp://www.so-net.ne.jp/solution/service/idc/aws.html","categories":[{"name":"クラウド","slug":"クラウド","permalink":"https://s-ichimaru.github.io/hexo-site/categories/クラウド/"},{"name":"AWS","slug":"クラウド/AWS","permalink":"https://s-ichimaru.github.io/hexo-site/categories/クラウド/AWS/"}],"tags":[{"name":"クラウド","slug":"クラウド","permalink":"https://s-ichimaru.github.io/hexo-site/tags/クラウド/"},{"name":"AWS","slug":"AWS","permalink":"https://s-ichimaru.github.io/hexo-site/tags/AWS/"}]},{"title":"IntelliJ IDEAを試してみる","slug":"IntelliJ-IDEA-20180912","date":"2018-09-12T12:00:00.000Z","updated":"2018-09-15T15:52:43.754Z","comments":true,"path":"2018/09/12/IntelliJ-IDEA-20180912/","link":"","permalink":"https://s-ichimaru.github.io/hexo-site/2018/09/12/IntelliJ-IDEA-20180912/","excerpt":"最近、Java IDEでIntelliJ IDEAをよく目にする。キーボードのみで作業可能やら、コード保管が素晴らしいやら評判が良い。とりあえず触ってみることにする。","text":"最近、Java IDEでIntelliJ IDEAをよく目にする。キーボードのみで作業可能やら、コード保管が素晴らしいやら評判が良い。とりあえず触ってみることにする。 IntelliJ IDEAとはJavaなど数多くのプログラミング言語に対応した統合開発環境。リファクタリング機能をJava用の統合開発環境としては初めて搭載したことでも知られる。変数に型のないプログラミング言語に対してもリファクタリングを提供している。ZeroTurnaroundの調査によると、Javaの統合開発環境としてはEclipseに続いて2番目に人気である (2011年はシェア22%[3]、2012年はシェア28%[4])。 wikipedia,ja.wikipedia.org/wiki/IntelliJ_IDEA 2位とあるが、既にEclipseは抜かれていたりする。 （参考：https://zeroturnaround.com） インストールとセットアップの公式ドキュメントhttps://pleiades.io/help/idea/install-and-set-up-product.html URLにPleiades？IntelliJでも日本語化にはPleiadesを利用するらしい。 インストールhttps://www.jetbrains.com/idea/ トップページにあるDownloadをクリック → Community(無償版)をダウンロード。 インストーラーを実行して、基本はデフォルトのまま進めていく。以下の画面ではチェックを付けている（結構適当・・・） 日本語化対応https://pleiades.io/pages/pleiades_jetbrains_manual.html さすがに英語はきついので、日本語化にする。 ・Pleiades インストーラーで日本語化Windowsを選んでダウンロード後、解凍する。setup.exeを実行すると以下の画面が出てくるので「C:\\Program Files\\JetBrains\\IntelliJ IDEA Community Edition 2018.2.3\\bin\\idea64.exe」を選択する。※インストール場所がデフォルトの場合これで完了 起動と簡易プロジェクトの作成利用規約とデータ共有の確認を行う。「新規プロジェクトの作成」を選択JDKがないみたいなので、インストール済みをjava8を選択する。その後「Javaモジュール」選択のまま次へ。 HelloWorldで実行確認 コード保管とりあえずコード保管をチェック。 「S」と入力した瞬間にコード保管が表示される。※elipseだと、入力後「Ctrl+Space」が必要。 とにかく一瞬でビューが表示されるので、「private static void」を入力する場合、pr[EnterKey] st[EnterKey] v[EnterKey]で入力を終えることができる。 あと、setValueメソッドを作って保管する場合、IntelliJだとEclipseだととなる。なお、IntelliJでもvを大文字にするとEclipseと同じ保管内容になる。なかなか賢いなと感じた。 総評まだ触ったばかりなので、なんとも言えないがEclipseよりも軽くストレスを感じにくかった。EclipseとIntelliJ両方を使えるようになっておきたい。","categories":[{"name":"アプリケーション","slug":"アプリケーション","permalink":"https://s-ichimaru.github.io/hexo-site/categories/アプリケーション/"},{"name":"Java","slug":"アプリケーション/Java","permalink":"https://s-ichimaru.github.io/hexo-site/categories/アプリケーション/Java/"}],"tags":[{"name":"アプリケーション","slug":"アプリケーション","permalink":"https://s-ichimaru.github.io/hexo-site/tags/アプリケーション/"},{"name":"Java","slug":"Java","permalink":"https://s-ichimaru.github.io/hexo-site/tags/Java/"}]},{"title":"Dojo Toolkit チュートリアル","slug":"dojo-tutorial","date":"2018-09-09T11:19:05.000Z","updated":"2018-09-15T15:52:36.792Z","comments":true,"path":"2018/09/09/dojo-tutorial/","link":"","permalink":"https://s-ichimaru.github.io/hexo-site/2018/09/09/dojo-tutorial/","excerpt":"","text":"DojoとはオープンソースのJavaScriptライブラリーの1つで、クロスブラウザに対応したJavaScript/Ajaxアプリケーションを迅速に開発するために設計されている。 DojoコンポーネントDojo（Base） コアパッケージ ・DOMの検索と操作 ・DOMのイベントハンドリング ・エフェクトとアニメーション ・Ajaxとサーバー連携 ・ドラッグ・アンド・ドロップ ・I/O ・データ管理 ・国際化対応 (i8n) ・ブラウザーの履歴管理 Dijit Dojo上に構成されたUIライブラリ ・Webアプリケーションの迅速な開発を支援するウィジェットのコレクション ・再利用可能なコンポーネントは、わずかのHTML、JavaScript、CSSで作成できる ・アプリケーション全体で一貫性のあるUXを提供し、カスタマイズ可能 ・メジャーブラウザーサポート Dojox サブプロジェクトを集めたライブラリ 実験用機能が含まれるため、あまり実用性はない（中には安定している機能はあるらしい） Util サポートツール ・コードのビルド ・テスト ・文書化 など AMD（Asynchronous Module Definition) モジュールローダー dojoではすべての機能を読み込むのではなく、必要に応じて利用するための仕組み Dojo Base チュートリアルサンプルコードはGitHubを参照dojo-tutorial 1.Dojoスクリプトの読み込みとonload ・ 1_1_ready.html 2.CSSセレクタの利用方法 ・ 1_2_domquery.html 3.AMDの利用 ・ 1_3_amd.html 4.イベント処理（ONイベント) ・ 1_4_on.html 5.マウスイベント処理（mouseイベント) ・ 1_5_mouse.html 6.DOMスタイル操作 ・ 1_6_domstyle.html 7.DOMクラス操作 ・ 1_7_domclass.html 8.DOM構築 ・ 1_8_domconstruct.html 9.イベントハンドラ ・ 1_9_eventhandle.html 10.イベント委譲 ・ 1_10_event_delegations.html Dijit チュートリアル1.Dijit Button(dom parser) ・ 2_1_dijit_button1.html 2.Dijit Button(dynamic create) ・ 2_2_dijit_button2.html 3.Dijit Buttons(Component Types) ・ 2_3_dijit_button3.html 4.Dijit TextBoxs(Component Types) ・ 2_4_dijit_textbox1.html 5.Dijit TextBoxs(dijit/registry) ・ 2_5_dijit_textbox2.html 6.Dijit Select or Combo(Component Types) ・ 2_6_dijit_select.html その他調査1.関数オーバーライド ex1_override.html 2.closet ex2_closest.html","categories":[{"name":"アプリケーション","slug":"アプリケーション","permalink":"https://s-ichimaru.github.io/hexo-site/categories/アプリケーション/"},{"name":"Dojo Toolkit","slug":"アプリケーション/Dojo-Toolkit","permalink":"https://s-ichimaru.github.io/hexo-site/categories/アプリケーション/Dojo-Toolkit/"}],"tags":[{"name":"アプリケーション","slug":"アプリケーション","permalink":"https://s-ichimaru.github.io/hexo-site/tags/アプリケーション/"},{"name":"Dojo Toolkit","slug":"Dojo-Toolkit","permalink":"https://s-ichimaru.github.io/hexo-site/tags/Dojo-Toolkit/"}]}]}