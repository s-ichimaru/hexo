{"meta":{"title":"Tech-Tutorial","subtitle":null,"description":null,"author":"Satoshi Ichimaru","url":"https://s-ichimaru.github.io/hexo-site"},"pages":[{"title":"categories","date":"2018-09-12T05:11:05.000Z","updated":"2018-09-12T05:35:37.713Z","comments":false,"path":"categories/index.html","permalink":"https://s-ichimaru.github.io/hexo-site/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2018-09-12T05:11:14.000Z","updated":"2018-09-12T05:35:56.299Z","comments":false,"path":"tags/index.html","permalink":"https://s-ichimaru.github.io/hexo-site/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"はじめてのAWS：①AWS概要","slug":"aws-20180915-1","date":"2018-09-15T08:27:38.000Z","updated":"2018-09-15T15:47:21.355Z","comments":true,"path":"2018/09/15/aws-20180915-1/","link":"","permalink":"https://s-ichimaru.github.io/hexo-site/2018/09/15/aws-20180915-1/","excerpt":"","text":"AWSとはAmazon Web Services（アマゾン ウェブ サービス、AWS）とは、Amazon.comにより提供されているクラウドコンピューティングサービス（ウェブサービス）である。これらのサービスは全世界で18の地域に提供されている（2018年現在）。AWSの有名なサービスにAmazon Elastic Compute Cloud (EC2) とAmazon Simple Storage Service (S3) がある。これまでのクライアントが保有していた物理的なサーバファームと比較してAWSは大規模な計算処理能力を速やかに提供出来ることが強みである。 wikipedia,ja.wikipedia.org/wiki/Amazon_Web_Services AWSサービス概要 少々古い情報だが見やすいので参考にさせてもらった。参考：http://www.so-net.ne.jp/solution/service/idc/aws.html 非常にサービスが多いため、主要となるインフラ部分を重点的に整理することにする。 コンピューティング Amazon EC2：仮想サーバhttps://aws.amazon.com/jp/ec2/ Amazon Elastic Compute Cloud (Amazon EC2) は、安全でサイズ変更可能なコンピューティング性能をクラウド内で提供するウェブサービス。アプリケーションのニーズに応じて自動的なスケールアップ、スケールダウンを数分以内に実現可能。 料金体系・オンデマントインスタンス（従量課金制）長期的な契約無しにコンピューティングの性能に対して料金を支払う。 ・リザーブドインスタンス（1年または3年契約の前払い）オンデマントインスタンスの料金に比べて大幅な割引（最大７５％）が受けれる。 ・スポットインスタンス入札式で余ったリソースを使うためオンデマンドよりも安い。需要と供給により価格が変動するため、入札価格が変動価格を上回れば「強制的に削除」される。大量のコンピューティング容量を必要としながら、緊急性は低い場合に便利なオプション。 料金表https://aws.amazon.com/jp/ec2/pricing/ Amazon Elastic Container Service：コンテナ管理サービスhttps://aws.amazon.com/jp/ecs/ Amazon Elastic Container Service (ECS) は、Docker コンテナをサポートするスケーラビリティに優れた高性能なコンテナ管理サービス。コンテナ化されたアプリケーションをAWSで簡単に実行およびスケールが可能。 料金体系・Fargate起動タイプモデルコンテナ化されたアプリケーションに必要なvCPU（仮想CPU）とメモリリソースで金額がかかる ・FC2起動タイプ追加料金は発生しない。アプリケーションを保存、実行するために作成したAWSリソース（FC2インスタンス、FBSボリュームなど）に対して料金が発生する。 料金表https://aws.amazon.com/jp/ecs/pricing/ ストレージ Amazon S3：オンラインストレージサービスhttps://aws.amazon.com/jp/s3/ Amazon Simple Storage Service(Amazon S3) とは、Amazon Web Services によって提供されるオンラインストレージのWebサービス。Amazon S3は、Webサービスのインタフェースを介してストレージを提供している。保存できるデータ容量、ファイル数に制約はないが、従量課金のため使った分だけ料金が発生する。 料金表https://aws.amazon.com/jp/s3/pricing/ Amazon EBS：EC2インスタンスのストレージhttps://aws.amazon.com/jp/ebs/ Amazon Elastic Block Store (Amazon EBS) は、AWS クラウドの Amazon EC2 インスタンスで使用する永続的なブロックレベルのストレージボリュームを提供する。 料金体系・Amazon EBS 汎用 SSD (gp2) ボリューム・Amazon EBS プロビジョンド IOPS SSD (io1) ボリューム ・Amazon EBS スループット最適化 HDD (st1) ボリューム・Amazon EBS Cold HDD (sc1) ボリューム プロビジョニング（リソース割り当て）した容量 (GB/月) で決まり、 そのストレージを解放するまで毎月料金が発生する。 ・Amazon S3 に対する Amazon EBS スナップショット Amazon S3とのデータ転送による料金を支払う。 料金表https://aws.amazon.com/jp/ebs/pricing/ Amazon EFS：ファイルストレージhttps://aws.amazon.com/jp/efs/ Amazon Elastic File System（Amazon EFS）とは、AWS上で使用できる共有ファイルストレージ。AWS上で複数のEC2インスタンスから共有ファイルストレージを使用したい場合に利用する。 料金表https://aws.amazon.com/jp/efs/pricing/ Amazon Glacier：低コストファイルストレージ頻繁に使用されないデータ（コールドデータ）に最適化された低コスト、高耐久性を備えたストレージサービスで、データのアーカイブや長期バックアップに使用できる。 料金表https://aws.amazon.com/jp/glacier/pricing/ データベース Amazon RDS：リレーショナルデータベースサービスhttps://aws.amazon.com/jp/rds/ Amazon Relational Database Service (Amazon RDS) を使用すると、クラウド内のリレーショナルデータベースのセットアップ、運用、スケールを行うことが可能。データベースの種類と利用時間で料金を支払う。Amazon Aurora、PostgreSQL、MySQL、MariaDB、Oracle、Microsoft SQL Server の6 つの使い慣れたデータベースエンジンから選択可能。Amazon Auroraとは、MySQL および PostgreSQL と互換性のあるリレーショナルデータベースエンジン。 DBインスタンスクラスhttps://docs.aws.amazon.com/ja_jp/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html 料金体系オンデマンドインスタンス or リザーブドインスタンス 料金表https://aws.amazon.com/jp/rds/pricing/ Amazon DynamoDB：NoSQLデータベースサービスhttps://aws.amazon.com/jp/dynamodb/ NoSQL（Key-Valueストア）によるデータベースサービス。RDBMSに比べて大量のデータを扱うことができる。（ビックデータの解析、情報のリアルタイム処理など） 料金表https://aws.amazon.com/jp/dynamodb/pricing/ Amazon ElastiCache：インメモリデータベースサービスhttps://aws.amazon.com/jp/elasticache/ フルマネージドな分散インメモリデータベースストらサービスキャッシュエンジンとしてmemcachedとRedisがサポートされている。 料金表https://aws.amazon.com/jp/elasticache/pricing/ ネットワーク＆ルーティング Amazon VPC：仮想プライベートクラウドhttps://aws.amazon.com/jp/vpc/ Amazon Virtual Private Cloud (Amazon VPC) によりAWSリソースをユーザー定義の仮想ネットワークで起動できる。独自のIPアドレス範囲の選択、サブネットの作成、ルートテーブル、ネットワークゲートウェイの設定など、仮想ネットワーク環境を完全にコントロール可能。 料金表https://aws.amazon.com/jp/vpc/pricing/ Amazon Elastic Load Balancing：ロードバランサhttps://aws.amazon.com/jp/elasticloadbalancing/ Elastic Load Balancing は、アプリケーションへのトラフィックを複数のターゲット (Amazon EC2 インスタンス、コンテナ、IP アドレスなど) に自動的に分散する。 料金表https://aws.amazon.com/jp/elasticloadbalancing/pricing/ Amazon Route 53：クラウドDNSサーバhttps://aws.amazon.com/jp/route53/ Amazon Route 53 は、可用性と拡張性に優れたドメインネームシステム (DNS) ウェブサービス。 料金表https://aws.amazon.com/jp/route53/pricing/ AWS Direct Connect：専用線接続サービスhttps://aws.amazon.com/jp/directconnect/ AWS Direct Connect を使用するとAWS とデータセンター、オフィス、またはコロケーション環境間にプライベート接続を確立することができる。 料金表https://aws.amazon.com/jp/directconnect/pricing/ 参考資料Amazon Web Servicehttps://aws.amazon.com/jp/ アマゾンウェブサービスの概要https://d1.awsstatic.com/International/ja_JP/Whitepapers/aws-overview.pdf [初心者向け]AWSで開発環境を構築しようhttps://www.slideshare.net/AmazonWebServicesJapan/webinar-aws 【2018年】AWS全サービスまとめ その1（コンピューティング、ストレージ、データベース、移行、ネットワーキング ＆ コンテンツ配信）https://dev.classmethod.jp/cloud/aws/aws-summary-2018-1/ So-netソリューションサービスhttp://www.so-net.ne.jp/solution/service/idc/aws.html","categories":[{"name":"クラウド","slug":"クラウド","permalink":"https://s-ichimaru.github.io/hexo-site/categories/クラウド/"},{"name":"AWS","slug":"クラウド/AWS","permalink":"https://s-ichimaru.github.io/hexo-site/categories/クラウド/AWS/"}],"tags":[{"name":"クラウド","slug":"クラウド","permalink":"https://s-ichimaru.github.io/hexo-site/tags/クラウド/"},{"name":"AWS","slug":"AWS","permalink":"https://s-ichimaru.github.io/hexo-site/tags/AWS/"}]},{"title":"IntelliJ IDEAを試してみる","slug":"IntelliJ-IDEA-20180912","date":"2018-09-12T12:00:00.000Z","updated":"2018-09-12T12:51:45.275Z","comments":true,"path":"2018/09/12/IntelliJ-IDEA-20180912/","link":"","permalink":"https://s-ichimaru.github.io/hexo-site/2018/09/12/IntelliJ-IDEA-20180912/","excerpt":"最近、Java IDEでIntelliJ IDEAをよく目にする。キーボードのみで作業可能やら、コード保管が素晴らしいやら評判が良い。とりあえず触ってみることにする。","text":"最近、Java IDEでIntelliJ IDEAをよく目にする。キーボードのみで作業可能やら、コード保管が素晴らしいやら評判が良い。とりあえず触ってみることにする。 IntelliJ IDEAとはJavaなど数多くのプログラミング言語に対応した統合開発環境。リファクタリング機能をJava用の統合開発環境としては初めて搭載したことでも知られる。変数に型のないプログラミング言語に対してもリファクタリングを提供している。ZeroTurnaroundの調査によると、Javaの統合開発環境としてはEclipseに続いて2番目に人気である (2011年はシェア22%[3]、2012年はシェア28%[4])。 wikipedia,ja.wikipedia.org/wiki/IntelliJ_IDEA 2位とあるが、既にEclipseは抜かれていたりする。 （参考：https://zeroturnaround.com） インストールとセットアップの公式ドキュメントhttps://pleiades.io/help/idea/install-and-set-up-product.html URLにPleiades？IntelliJでも日本語化にはPleiadesを利用するらしい。 インストールhttps://www.jetbrains.com/idea/ トップページにあるDownloadをクリック → Community(無償版)をダウンロード。 インストーラーを実行して、基本はデフォルトのまま進めていく。以下の画面ではチェックを付けている（結構適当・・・） 日本語化対応https://pleiades.io/pages/pleiades_jetbrains_manual.html さすがに英語はきついので、日本語化にする。 ・Pleiades インストーラーで日本語化Windowsを選んでダウンロード後、解凍する。setup.exeを実行すると以下の画面が出てくるので「C:\\Program Files\\JetBrains\\IntelliJ IDEA Community Edition 2018.2.3\\bin\\idea64.exe」を選択する。※インストール場所がデフォルトの場合これで完了 起動と簡易プロジェクトの作成利用規約とデータ共有の確認を行う。「新規プロジェクトの作成」を選択JDKがないみたいなので、インストール済みをjava8を選択する。その後「Javaモジュール」選択のまま次へ。 HelloWorldで実行確認 コード保管とりあえずコード保管をチェック。 「S」と入力した瞬間にコード保管が表示される。※elipseだと、入力後「Ctrl+Space」が必要。 とにかく一瞬でビューが表示されるので、「private static void」を入力する場合、pr[EnterKey] st[EnterKey] v[EnterKey]で入力を終えることができる。 あと、setValueメソッドを作って保管する場合、IntelliJだとEclipseだととなる。なお、IntelliJでもvを大文字にするとEclipseと同じ保管内容になる。なかなか賢いなと感じた。 総評まだ触ったばかりなので、なんとも言えないがEclipseよりも軽くストレスを感じにくかった。EclipseとIntelliJ両方を使えるようになっておきたい。","categories":[{"name":"Java","slug":"Java","permalink":"https://s-ichimaru.github.io/hexo-site/categories/Java/"}],"tags":[{"name":"Java","slug":"Java","permalink":"https://s-ichimaru.github.io/hexo-site/tags/Java/"}]},{"title":"Dojo Toolkit チュートリアル","slug":"dojo-tutorial","date":"2018-09-09T11:19:05.000Z","updated":"2018-09-12T07:45:38.770Z","comments":true,"path":"2018/09/09/dojo-tutorial/","link":"","permalink":"https://s-ichimaru.github.io/hexo-site/2018/09/09/dojo-tutorial/","excerpt":"","text":"DojoとはオープンソースのJavaScriptライブラリーの1つで、クロスブラウザに対応したJavaScript/Ajaxアプリケーションを迅速に開発するために設計されている。 DojoコンポーネントDojo（Base） コアパッケージ ・DOMの検索と操作 ・DOMのイベントハンドリング ・エフェクトとアニメーション ・Ajaxとサーバー連携 ・ドラッグ・アンド・ドロップ ・I/O ・データ管理 ・国際化対応 (i8n) ・ブラウザーの履歴管理 Dijit Dojo上に構成されたUIライブラリ ・Webアプリケーションの迅速な開発を支援するウィジェットのコレクション ・再利用可能なコンポーネントは、わずかのHTML、JavaScript、CSSで作成できる ・アプリケーション全体で一貫性のあるUXを提供し、カスタマイズ可能 ・メジャーブラウザーサポート Dojox サブプロジェクトを集めたライブラリ 実験用機能が含まれるため、あまり実用性はない（中には安定している機能はあるらしい） Util サポートツール ・コードのビルド ・テスト ・文書化 など AMD（Asynchronous Module Definition) モジュールローダー dojoではすべての機能を読み込むのではなく、必要に応じて利用するための仕組み Dojo Base チュートリアルサンプルコードはGitHubを参照dojo-tutorial 1.Dojoスクリプトの読み込みとonload ・ 1_1_ready.html 2.CSSセレクタの利用方法 ・ 1_2_domquery.html 3.AMDの利用 ・ 1_3_amd.html 4.イベント処理（ONイベント) ・ 1_4_on.html 5.マウスイベント処理（mouseイベント) ・ 1_5_mouse.html 6.DOMスタイル操作 ・ 1_6_domstyle.html 7.DOMクラス操作 ・ 1_7_domclass.html 8.DOM構築 ・ 1_8_domconstruct.html 9.イベントハンドラ ・ 1_9_eventhandle.html 10.イベント委譲 ・ 1_10_event_delegations.html Dijit チュートリアル1.Dijit Button(dom parser) ・ 2_1_dijit_button1.html 2.Dijit Button(dynamic create) ・ 2_2_dijit_button2.html 3.Dijit Buttons(Component Types) ・ 2_3_dijit_button3.html 4.Dijit TextBoxs(Component Types) ・ 2_4_dijit_textbox1.html 5.Dijit TextBoxs(dijit/registry) ・ 2_5_dijit_textbox2.html 6.Dijit Select or Combo(Component Types) ・ 2_6_dijit_select.html その他調査1.関数オーバーライド ex1_override.html 2.closet ex2_closest.html","categories":[{"name":"Dojo Toolkit","slug":"Dojo-Toolkit","permalink":"https://s-ichimaru.github.io/hexo-site/categories/Dojo-Toolkit/"}],"tags":[{"name":"Dojo Toolkit","slug":"Dojo-Toolkit","permalink":"https://s-ichimaru.github.io/hexo-site/tags/Dojo-Toolkit/"},{"name":"チュートリアル","slug":"チュートリアル","permalink":"https://s-ichimaru.github.io/hexo-site/tags/チュートリアル/"}]}]}